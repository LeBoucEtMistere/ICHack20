# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util

import re


class Receipt(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, total: float=None, receipt_holder: str=None, emmiter: str=None, receiver: str=None, _date: str=None, currency: str=None, vat: float=None, receipt_items=None, status: object=None):  # noqa: E501
        """Receipt - a model defined in Swagger

        :param id: The id of this Receipt.  # noqa: E501
        :type id: str
        :param total: The total of this Receipt.  # noqa: E501
        :type total: float
        :param receipt_holder: The receipt_holder of this Receipt.  # noqa: E501
        :type receipt_holder: str
        :param emmiter: The emmiter of this Receipt.  # noqa: E501
        :type emmiter: str
        :param receiver: The receiver of this Receipt.  # noqa: E501
        :type receiver: str
        :param _date: The _date of this Receipt.  # noqa: E501
        :type _date: str
        :param currency: The currency of this Receipt.  # noqa: E501
        :type currency: str
        :param vat: The vat of this Receipt.  # noqa: E501
        :type vat: float
        :param receipt_items: The receipt_items of this Receipt.  # noqa: E501
        :type receipt_items: List[ReceiptItem]
        :param status: The status of this Receipt.  # noqa: E501
        :type status: object
        """
        self.swagger_types = {
            'id': str,
            'total': float,
            'receipt_holder': str,
            'emmiter': str,
            'receiver': str,
            '_date': str,
            'currency': str,
            'vat': float,
            'status': object
        }

        self.attribute_map = {
            'id': 'id',
            'total': 'total',
            'receipt_holder': 'receiptHolder',
            'emmiter': 'emmiter',
            'receiver': 'receiver',
            '_date': 'date',
            'currency': 'currency',
            'vat': 'VAT',
            'receipt_items': 'receiptItems',
            'status': 'status'
        }

        self._id = id
        self._total = total
        self._receipt_holder = receipt_holder
        self._emmiter = emmiter
        self._receiver = receiver
        self.__date = _date
        self._currency = currency
        self._vat = vat
        self._receipt_items = receipt_items
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Receipt':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Receipt of this Receipt.  # noqa: E501
        :rtype: Receipt
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Receipt.


        :return: The id of this Receipt.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Receipt.


        :param id: The id of this Receipt.
        :type id: str
        """

        self._id = id

    @property
    def total(self) -> float:
        """Gets the total of this Receipt.


        :return: The total of this Receipt.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this Receipt.


        :param total: The total of this Receipt.
        :type total: float
        """

        self._total = total

    @property
    def receipt_holder(self) -> str:
        """Gets the receipt_holder of this Receipt.


        :return: The receipt_holder of this Receipt.
        :rtype: str
        """
        return self._receipt_holder

    @receipt_holder.setter
    def receipt_holder(self, receipt_holder: str):
        """Sets the receipt_holder of this Receipt.


        :param receipt_holder: The receipt_holder of this Receipt.
        :type receipt_holder: str
        """

        self._receipt_holder = receipt_holder

    @property
    def emmiter(self) -> str:
        """Gets the emmiter of this Receipt.


        :return: The emmiter of this Receipt.
        :rtype: str
        """
        return self._emmiter

    @emmiter.setter
    def emmiter(self, emmiter: str):
        """Sets the emmiter of this Receipt.


        :param emmiter: The emmiter of this Receipt.
        :type emmiter: str
        """

        self._emmiter = emmiter

    @property
    def receiver(self) -> str:
        """Gets the receiver of this Receipt.


        :return: The receiver of this Receipt.
        :rtype: str
        """
        return self._receiver

    @receiver.setter
    def receiver(self, receiver: str):
        """Sets the receiver of this Receipt.


        :param receiver: The receiver of this Receipt.
        :type receiver: str
        """

        self._receiver = receiver

    @property
    def _date(self) -> str:
        """Gets the _date of this Receipt.


        :return: The _date of this Receipt.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Receipt.


        :param _date: The _date of this Receipt.
        :type _date: str
        """
        if _date is not None and not re.search(r'^\\d{2}-\\d{2}-\\d{4}$', _date):  # noqa: E501
            raise ValueError("Invalid value for `_date`, must be a follow pattern or equal to `/^\\d{2}-\\d{2}-\\d{4}$/`")  # noqa: E501

        self.__date = _date

    @property
    def currency(self) -> str:
        """Gets the currency of this Receipt.


        :return: The currency of this Receipt.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this Receipt.


        :param currency: The currency of this Receipt.
        :type currency: str
        """

        self._currency = currency

    @property
    def vat(self) -> float:
        """Gets the vat of this Receipt.


        :return: The vat of this Receipt.
        :rtype: float
        """
        return self._vat

    @vat.setter
    def vat(self, vat: float):
        """Sets the vat of this Receipt.


        :param vat: The vat of this Receipt.
        :type vat: float
        """

        self._vat = vat

    @property
    def receipt_items(self):
        """Gets the receipt_items of this Receipt.


        :return: The receipt_items of this Receipt.
        :rtype: List[ReceiptItem]
        """
        return self._receipt_items

    @receipt_items.setter
    def receipt_items(self, receipt_items):
        """Sets the receipt_items of this Receipt.


        :param receipt_items: The receipt_items of this Receipt.
        :type receipt_items: List[ReceiptItem]
        """

        self._receipt_items = receipt_items

    @property
    def status(self) -> object:
        """Gets the status of this Receipt.


        :return: The status of this Receipt.
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status: object):
        """Sets the status of this Receipt.


        :param status: The status of this Receipt.
        :type status: object
        """

        self._status = status
